{"version":3,"file":"static/js/529.1db5f3bd.chunk.js","mappings":"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","sources":["app/components/common/SectionWrapper/index.ts","app/components/common/SectionWrapper/SectionWrapper.tsx","app/components/common/Tabs/index.ts","app/components/common/Tabs/Tabs.tsx","app/components/common/Table/TableBody/index.ts","app/components/common/Table/TableBody/TableBody.tsx","app/components/common/Table/TableFooter/index.ts","app/components/common/Table/TableFooter/TableFooter.tsx","app/components/common/Table/TableHeader/index.ts","app/components/common/Table/TableHeader/TableHeader.tsx","app/components/common/Table/index.ts","app/components/common/Table/Table/Table.tsx","app/components/ui/Admin/UsersTable/index.ts","app/components/ui/Admin/UsersTable/UsersTable.tsx","app/components/ui/Admin/TicketItem/index.ts","app/components/ui/Admin/TicketItem/TicketItem.tsx","app/components/ui/Admin/TicketList/index.ts","app/components/ui/Admin/TicketList/TicketList.tsx","app/components/ui/Admin/BookingFilterPanel/validatorConfig.ts","app/components/ui/Admin/BookingFilterPanel/index.ts","app/components/ui/Admin/BookingFilterPanel/BookingFilterPanel.tsx","app/components/ui/Admin/EstatesStatus/index.ts","app/components/ui/Admin/EstatesStatus/EstatesStatus.tsx","app/components/pages/AdminPage/index.ts","app/components/pages/AdminPage/AdminPage.tsx","app/layouts/admin.tsx"],"sourcesContent":["import SectionWrapper from \"./SectionWrapper\";\r\n\r\nexport default SectionWrapper;\r\n","import React from \"react\";\r\n\r\ninterface IWrapper {\r\n    children: React.ReactChild | React.ReactNode;\r\n    className: string;\r\n}\r\n\r\nconst SectionWrapper: React.FC<IWrapper> = ({ children, className }) => {\r\n    return (\r\n        <section className={className}>\r\n            <div className={className + \"__container _container\"}>\r\n                {children}\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default SectionWrapper;\r\n","import Tabs from \"./Tabs\";\r\nexport default Tabs;\r\n","import React, { useState } from \"react\";\r\nimport { Tab, TabList, TabPanel, Tabs as ReactTabs } from \"react-tabs\";\r\n\r\ninterface ITab {\r\n    _id: number;\r\n    name: string;\r\n    component: React.ReactNode | React.ReactNode[];\r\n}\r\n\r\ninterface ITabs {\r\n    options: ITab[];\r\n}\r\n\r\nconst Tabs: React.FC<ITabs> = ({ options, ...rest }) => {\r\n    const [value, setValue] = useState(0);\r\n\r\n    const handleChange = (page: number) => {\r\n        setValue(page);\r\n    };\r\n\r\n    return (\r\n        <ReactTabs selectedIndex={value} onSelect={handleChange}>\r\n            <div className=\"tabs-header\">\r\n                <TabList className=\"tab-list\">\r\n                    {options.map((tab) => (\r\n                        <Tab\r\n                            key={tab.name}\r\n                            className={`tab-list__item second ${\r\n                                tab._id === value ? \"selected\" : \"\"\r\n                            }`}\r\n                        >\r\n                            {tab.name}\r\n                        </Tab>\r\n                    ))}\r\n                </TabList>\r\n            </div>\r\n            {options.map((option, index) => (\r\n                <div\r\n                    key={option.name}\r\n                    role=\"tabpanel\"\r\n                    hidden={value !== index}\r\n                    {...rest}\r\n                >\r\n                    <TabPanel key={option.name} className={\"tab-list__panel\"}>\r\n                        {option.component}\r\n                    </TabPanel>\r\n                </div>\r\n            ))}\r\n        </ReactTabs>\r\n    );\r\n};\r\n\r\nexport default Tabs;\r\n","import TableBody from \"./TableBody\";\r\nexport default TableBody;\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\ntype TableBodyProps = {\r\n    data: any[];\r\n    columns: any[];\r\n};\r\n\r\nconst TableBody: React.FC<TableBodyProps> = ({ data, columns }) => {\r\n    const renderContent = (item: any, column: any) => {\r\n        if (columns[column].component) {\r\n            const component = columns[column].component;\r\n\r\n            return component(item);\r\n        }\r\n        return _.get(item, columns[column].path);\r\n    };\r\n\r\n    return (\r\n        <tbody className=\"table-body\">\r\n            {data.map((item: any) => (\r\n                <tr key={item._id} className={\"table-body__item\"}>\r\n                    {Object.keys(columns).map((column) => (\r\n                        <td key={column}>{renderContent(item, column)}</td>\r\n                    ))}\r\n                </tr>\r\n            ))}\r\n        </tbody>\r\n    );\r\n};\r\n\r\nexport default TableBody;\r\n","import TableFooter from \"./TableFooter\";\r\nexport default TableFooter;\r\n","import React from \"react\";\r\nimport { pageSizesList } from \"../../../../constants/appFilter\";\r\nimport Pagination from \"../../Pagination\";\r\n\r\ntype TableFooterProps = {\r\n    handleLimitChange: (event: any) => void;\r\n    page: number;\r\n    limit: number;\r\n    handlePageChange: (event: any) => void;\r\n    data: any[];\r\n};\r\n\r\nconst TableFooter: React.FC<TableFooterProps> = ({\r\n    handleLimitChange,\r\n    page,\r\n    limit,\r\n    handlePageChange,\r\n    data\r\n}) => {\r\n    return (\r\n        <tbody className=\"table-footer\">\r\n            <tr className=\"table-footer__item\">\r\n                <td>\r\n                    Отображать по:{\" \"}\r\n                    <select\r\n                        name=\"page-size\"\r\n                        onChange={handleLimitChange}\r\n                        className={\"table-footer__select\"}\r\n                    >\r\n                        {pageSizesList.map(\r\n                            (item: { value: number; name: string }) => (\r\n                                <option\r\n                                    key={item.value}\r\n                                    value={item.value}\r\n                                    defaultValue=\"3\"\r\n                                >\r\n                                    {item.name}\r\n                                </option>\r\n                            )\r\n                        )}\r\n                    </select>\r\n                </td>\r\n            </tr>\r\n            <tr className=\"table-footer__item\">\r\n                <td>\r\n                    <Pagination\r\n                        currentPage={page}\r\n                        itemsCount={data.length}\r\n                        onPageChange={handlePageChange}\r\n                        pageSize={limit}\r\n                    />\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    );\r\n};\r\n\r\nexport default TableFooter;\r\n","import TableHeader from \"./TableHeader\";\r\nexport default TableHeader;\r\n","import React from \"react\";\r\n\r\ntype TableHeaderProps = {\r\n    columns: any[];\r\n};\r\n\r\nconst TableHeader: React.FC<TableHeaderProps> = ({ columns }) => {\r\n    return (\r\n        <thead className=\"table-header\">\r\n            <tr className=\"table-header__item\">\r\n                {Object.keys(columns).map((column: any) => (\r\n                    <th\r\n                        key={column}\r\n                        {...{ role: columns[column].path && \"button\" }}\r\n                        scope=\"col\"\r\n                    >\r\n                        {columns[column].name}\r\n                    </th>\r\n                ))}\r\n            </tr>\r\n        </thead>\r\n    );\r\n};\r\n\r\nexport default TableHeader;\r\n","import Table from \"./Table\";\r\nimport TableHeader from \"./TableHeader\";\r\nimport TableBody from \"./TableBody\";\r\nimport TableFooter from \"./TableFooter\";\r\n\r\nexport { TableHeader, TableBody, TableFooter };\r\nexport default Table;\r\n","import React, { useEffect } from \"react\";\r\nimport { usePaginate } from \"../../../../hooks\";\r\nimport { Order } from \"../../../../hooks/useSort\";\r\nimport { UserType } from \"../../../../types/types\";\r\nimport TableBody from \"../TableBody\";\r\nimport TableFooter from \"../TableFooter\";\r\nimport TableHeader from \"../TableHeader\";\r\n\r\nexport interface IColumn {\r\n    [key: string]: {\r\n        name?: string;\r\n        path?: string;\r\n        component?: (user: UserType) => Element;\r\n    };\r\n}\r\n\r\ntype TableProps = {\r\n    data: UserType[];\r\n    columns: IColumn[];\r\n    selectedSort: { path: keyof UserType; order: Order };\r\n    onSort: (item: any) => void;\r\n    children?: React.ReactChild | React.ReactNode;\r\n};\r\n\r\nexport const Table: React.FC<TableProps> = ({ children, data, columns }) => {\r\n    const {\r\n        itemsListCrop: dataCrop,\r\n        handlePageChange,\r\n        page,\r\n        limit,\r\n        handleLimitChange\r\n    } = usePaginate(data, 3, 1);\r\n\r\n    useEffect(() => {\r\n        if (dataCrop.length === 0) {\r\n            handlePageChange(0);\r\n        }\r\n    }, [dataCrop]);\r\n\r\n    return (\r\n        <table className=\"table\">\r\n            {children || (\r\n                <>\r\n                    <TableHeader columns={columns} />\r\n                    <TableBody data={dataCrop} columns={columns} />\r\n                    <TableFooter\r\n                        {...{\r\n                            data,\r\n                            handleLimitChange,\r\n                            page,\r\n                            limit,\r\n                            handlePageChange\r\n                        }}\r\n                    />\r\n                </>\r\n            )}\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default Table;\r\n","import UsersTable from \"./UsersTable\";\r\nexport default UsersTable;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useSort } from \"../../../../hooks\";\r\nimport { useAppDispatch, useStateSelector } from \"../../../../store\";\r\nimport { getUserBookingCount } from \"../../../../store/slices/booking\";\r\nimport {\r\n    deleteUser,\r\n    getCurrentUserData,\r\n    getCurrentUserId,\r\n    getUsersList\r\n} from \"../../../../store/slices/users\";\r\nimport { UserType } from \"../../../../types/types\";\r\nimport { getFormatDate } from \"../../../../utils/dateHelpers\";\r\nimport Button from \"../../../common/Button\";\r\nimport Table from \"../../../common/Table\";\r\n\r\nconst UsersTable: React.FC = () => {\r\n    const dispatch = useAppDispatch();\r\n    const users = useStateSelector(getUsersList());\r\n    const currentUserId = useStateSelector(getCurrentUserId());\r\n    const { sortBy, setSortBy, sortedItems } = useSort(users, {\r\n        path: \"name\",\r\n        order: \"desc\"\r\n    });\r\n\r\n    if (users) {\r\n        const columns: any = {\r\n            name: {\r\n                name: \"Имя\",\r\n                path: \"name\",\r\n                component: (user: UserType) => (\r\n                    <NavLink to={`/users/${user._id}`}>{user.name}</NavLink>\r\n                )\r\n            },\r\n            email: {\r\n                name: \"Email\",\r\n                path: \"email\"\r\n            },\r\n            role: {\r\n                name: \"Роль\",\r\n                path: \"role\",\r\n                component: (user: UserType) => (\r\n                    <>\r\n                        {user.role === \"ADMIN\" ? \"Администратор\" : \"Посетитель\"}\r\n                    </>\r\n                )\r\n            },\r\n            productsCount: {\r\n                name: \"Товаров забронированно\",\r\n                component: (user: UserType) => {\r\n                    return `${dispatch(getUserBookingCount(user._id))}`;\r\n                }\r\n            },\r\n            createdAt: {\r\n                name: \"Аккаунт создан:\",\r\n                component: (user: UserType) => (\r\n                    <span>{getFormatDate(user.createdAt)}</span>\r\n                )\r\n            },\r\n            delete: {\r\n                component: (user: UserType) => (\r\n                    <>\r\n                        {user._id !== currentUserId && (\r\n                            <Button\r\n                                onClick={() => dispatch(deleteUser(user._id))}\r\n                            >\r\n                                Удалить\r\n                            </Button>\r\n                        )}\r\n                    </>\r\n                )\r\n            }\r\n        };\r\n\r\n        if (sortedItems) {\r\n            return (\r\n                <Table\r\n                    selectedSort={sortBy}\r\n                    columns={columns}\r\n                    data={sortedItems}\r\n                    onSort={setSortBy}\r\n                />\r\n            );\r\n        }\r\n    }\r\n    return <h1>Пользователей пока нет</h1>;\r\n};\r\n\r\nexport default UsersTable;\r\n","import TicketItem from \"./TicketItem\";\r\nexport default TicketItem;\r\n","import React from \"react\";\r\nimport { useDialog } from \"../../../../hooks\";\r\nimport { useAppDispatch } from \"../../../../store\";\r\nimport { confirmTicket, removeTicket } from \"../../../../store/slices/tickets\";\r\nimport { getFormatDate } from \"../../../../utils/dateHelpers\";\r\nimport Button from \"../../../common/Button\";\r\nimport { TicketModal } from \"../../Modals\";\r\n\r\nexport interface ITicket {\r\n    _id?: string;\r\n    email: string;\r\n    name: string;\r\n    message: string;\r\n    status: string;\r\n    cause: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n}\r\n\r\ntype TicketItemProps = {\r\n    ticket: ITicket;\r\n};\r\n\r\nconst TicketItem: React.FC<TicketItemProps> = ({ ticket }) => {\r\n    const dispatch = useAppDispatch();\r\n    const { open, handleClickOpen, handleClose } = useDialog();\r\n\r\n    const handleTicketConfirm = () => {\r\n        dispatch(confirmTicket({ ...ticket, status: \"confirmed\" }));\r\n        handleClickOpen();\r\n    };\r\n    const handleRemoveTicket = (ticketId: string) => {\r\n        dispatch(removeTicket(ticketId));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"admin__ticket-block\">\r\n                <span className=\"admin__ticket-created\">\r\n                    {getFormatDate(ticket.created_at)}\r\n                </span>\r\n                <p className=\"admin__ticket-text\">{ticket.name}</p>\r\n                <p className=\"admin__ticket-text\">{ticket.email}</p>\r\n                <Button\r\n                    className=\"admin__ticket-button\"\r\n                    onClick={\r\n                        ticket.status === \"pending\"\r\n                            ? () => handleTicketConfirm()\r\n                            : () => handleClickOpen()\r\n                    }\r\n                >\r\n                    {ticket.status === \"pending\"\r\n                        ? \"Принять тикет\"\r\n                        : \"На рассмотрении\"}\r\n                </Button>\r\n            </div>\r\n            <TicketModal\r\n                open={open}\r\n                onClose={handleClose}\r\n                ticket={ticket}\r\n                onRemoveTicket={handleRemoveTicket}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TicketItem;\r\n","import TicketList from \"./TicketList\";\r\nexport default TicketList;\r\n","import React, { useEffect } from \"react\";\r\nimport { useAppDispatch, useStateSelector } from \"../../../../store\";\r\nimport {\r\n    getTickets,\r\n    getTicketsLoading,\r\n    loadTicketsList\r\n} from \"../../../../store/slices/tickets\";\r\nimport Loader from \"../../../common/Loader\";\r\nimport TicketItem from \"../TicketItem\";\r\nimport { ITicket } from \"../TicketItem/TicketItem\";\r\n\r\nconst TicketList: React.FC = () => {\r\n    const dispatch = useAppDispatch();\r\n    const tickets = useStateSelector<ITicket[]>(getTickets());\r\n    const ticketsLoading = useStateSelector(getTicketsLoading());\r\n\r\n    useEffect(() => {\r\n        dispatch(loadTicketsList());\r\n    }, []);\r\n\r\n    return (\r\n        <ul className=\"admin__ticket-list\">\r\n            {!ticketsLoading ? (\r\n                tickets.length > 0 ? (\r\n                    tickets.map((ticket) => (\r\n                        <li key={ticket._id} className=\"admin__ticket-item\">\r\n                            <TicketItem ticket={ticket} />\r\n                        </li>\r\n                    ))\r\n                ) : (\r\n                    <p className=\"booking__error-message\">\r\n                        Список тикетов пуст\r\n                    </p>\r\n                )\r\n            ) : (\r\n                <div className=\"admin__ticket-loader\">\r\n                    <Loader />\r\n                </div>\r\n            )}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default TicketList;\r\n","export const validatorConfig = {\r\n    entry: {\r\n        isRequired: {\r\n            message: \"Email обязателен для заполнения\"\r\n        }\r\n    },\r\n    departure: {\r\n        isRequired: {\r\n            message: \"Email обязателен для заполнения\"\r\n        }\r\n    }\r\n};\r\n","import BookingFilterPanel from \"./BookingFilterPanel\";\r\nexport default BookingFilterPanel;\r\n","import React, { useEffect } from \"react\";\r\nimport { useForm } from \"../../../../hooks\";\r\nimport useDebounce from \"../../../../hooks/useDebounce\";\r\nimport { EstateItem } from \"../../../../store/slices/estates\";\r\nimport { BookingDateType } from \"../../../../types/types\";\r\nimport {\r\n    getFormatDate,\r\n    getPresenceBookingDate\r\n} from \"../../../../utils/dateHelpers\";\r\nimport { DatePickerField } from \"../../../common/Fields\";\r\nimport { validatorConfig } from \"./validatorConfig\";\r\n\r\ntype BookingFilterPanelProps = {\r\n    estates: EstateItem[];\r\n    onFilterQuery: (data: BookingDateType, estates: EstateItem[]) => void;\r\n};\r\n\r\nconst BookingFilterPanel: React.FC<BookingFilterPanelProps> = ({\r\n    estates,\r\n    onFilterQuery\r\n}) => {\r\n    const { data, handleChange, errors } = useForm(\r\n        {\r\n            entry: getPresenceBookingDate(1),\r\n            departure: getPresenceBookingDate(2)\r\n        },\r\n        false,\r\n        validatorConfig\r\n    );\r\n\r\n    useEffect(() => {\r\n        onFilterQuery(data, estates);\r\n    }, [data, estates]);\r\n\r\n    return (\r\n        <div className=\"admin__dates\">\r\n            <div className=\"admin__date-fields\">\r\n                <DatePickerField\r\n                    name=\"entry\"\r\n                    label=\"Заезд\"\r\n                    value={data.entry}\r\n                    onChange={handleChange}\r\n                    minDate={new Date(\"1955-01-01\")}\r\n                    error={errors.entry}\r\n                />\r\n                <DatePickerField\r\n                    name=\"departure\"\r\n                    label=\"Выезд\"\r\n                    value={data.departure}\r\n                    onChange={handleChange}\r\n                    minDate={new Date(\"1955-01-01\")}\r\n                    error={errors.departure}\r\n                />\r\n            </div>\r\n            {data.entry && data.departure && (\r\n                <h3 className=\"admin__booking-date\">\r\n                    Товар доступный для бронирования на{\" \"}\r\n                    {getFormatDate(data.entry)} -{\" \"}\r\n                    {getFormatDate(data.departure)}\r\n                </h3>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BookingFilterPanel;\r\n","import EstatesStatus from \"./EstatesStatus\";\r\nexport default EstatesStatus;\r\n","import React from \"react\";\r\nimport { ADMIN_FILTER_KEY } from \"../../../../constants/sessionStorageConfig\";\r\nimport { useFilters } from \"../../../../hooks\";\r\nimport { useStateSelector } from \"../../../../store\";\r\nimport { getBookingList } from \"../../../../store/slices/booking\";\r\nimport { EstateItem } from \"../../../../store/slices/estates\";\r\nimport { EstatesList } from \"../../Estates\";\r\nimport BookingFilterPanel from \"../BookingFilterPanel\";\r\n\r\ntype EstatesStatusProps = {\r\n    estates: EstateItem[];\r\n};\r\n\r\nconst EstatesStatus: React.FC<EstatesStatusProps> = ({ estates, ...rest }) => {\r\n    const bookingList = useStateSelector(getBookingList());\r\n    const { handleFilter, filteredItems } = useFilters(\r\n        estates,\r\n        bookingList,\r\n        ADMIN_FILTER_KEY\r\n    );\r\n    return (\r\n        <div className=\"admin-status\">\r\n            <BookingFilterPanel\r\n                onFilterQuery={handleFilter}\r\n                estates={estates}\r\n            />\r\n            <div className={\"estates-products__row list\"}>\r\n                <EstatesList estates={filteredItems || []} {...rest} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EstatesStatus;\r\n","import AdminPage from \"./AdminPage\";\r\nexport default AdminPage;\r\n","import React from \"react\";\r\nimport { useStateSelector } from \"../../../store\";\r\nimport { getBookingLoading } from \"../../../store/slices/booking\";\r\nimport {\r\n    getEstatesList,\r\n    getEstatesLoadingStatus\r\n} from \"../../../store/slices/estates\";\r\nimport Tabs from \"../../common/Tabs\";\r\nimport { TicketList, UsersTable } from \"../../ui/Admin\";\r\nimport EstatesStatus from \"../../ui/Admin/EstatesStatus\";\r\nimport { BookingList } from \"../../ui/Booking\";\r\n\r\n// Email -> admin@gmail.com\r\n// Password -> Test1234\r\n\r\nconst AdminPage: React.FC = () => {\r\n    const estates = useStateSelector(getEstatesList());\r\n    const estatesLoading = useStateSelector(getEstatesLoadingStatus());\r\n    const bookingLoading = useStateSelector(getBookingLoading());\r\n\r\n    const tabsColumns = [\r\n        {\r\n            _id: 0,\r\n            name: \"Пользователи\",\r\n            component: <UsersTable />\r\n        },\r\n        {\r\n            _id: 1,\r\n            name: \"Бронирования\",\r\n            component: <BookingList role=\"ADMIN\" />\r\n        },\r\n        {\r\n            _id: 2,\r\n            name: \"Товары\",\r\n            component: <EstatesStatus estates={estates} />\r\n        },\r\n        {\r\n            _id: 3,\r\n            name: \"Тикеты\",\r\n            component: <TicketList />\r\n        }\r\n    ];\r\n\r\n    if (!estatesLoading && !bookingLoading) {\r\n        return (\r\n            <div className=\"admin__body\">\r\n                <Tabs options={tabsColumns} />\r\n            </div>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default AdminPage;\r\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport Breadcrumbs from \"../components/common/Breadcrumbs\";\r\nimport SectionWrapper from \"../components/common/SectionWrapper\";\r\nimport Wrapper from \"../components/common/Wrapper\";\r\nimport AdminPage from \"../components/pages/AdminPage\";\r\n\r\nconst Admin = () => {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return (\r\n        <Wrapper hasTicketForm={false}>\r\n            <SectionWrapper className=\"admin-page\">\r\n                <Breadcrumbs />\r\n                <AdminPage />\r\n            </SectionWrapper>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Admin;\r\n"],"names":["children","className","options","rest","useState","value","setValue","selectedIndex","onSelect","page","map","tab","_id","name","option","index","role","hidden","component","data","columns","renderContent","item","column","_","path","Object","keys","handleLimitChange","limit","handlePageChange","onChange","pageSizesList","defaultValue","Pagination","currentPage","itemsCount","length","onPageChange","pageSize","scope","usePaginate","dataCrop","itemsListCrop","useEffect","dispatch","useAppDispatch","users","useStateSelector","getUsersList","currentUserId","getCurrentUserId","useSort","order","sortBy","setSortBy","sortedItems","user","to","email","productsCount","getUserBookingCount","createdAt","getFormatDate","delete","Button","onClick","deleteUser","selectedSort","onSort","ticket","useDialog","open","handleClickOpen","handleClose","created_at","status","confirmTicket","onClose","onRemoveTicket","ticketId","removeTicket","tickets","getTickets","ticketsLoading","getTicketsLoading","loadTicketsList","Loader","validatorConfig","entry","isRequired","message","departure","estates","onFilterQuery","useForm","getPresenceBookingDate","handleChange","errors","label","minDate","Date","error","bookingList","getBookingList","useFilters","ADMIN_FILTER_KEY","handleFilter","filteredItems","Estates","getEstatesList","estatesLoading","getEstatesLoadingStatus","bookingLoading","getBookingLoading","tabsColumns","Booking","pathname","useLocation","window","scrollTo","Wrapper","hasTicketForm","SectionWrapper","Breadcrumbs"],"sourceRoot":""}