{"version":3,"file":"static/js/93.e6c6e4e4.chunk.js","mappings":"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","sources":["app/components/common/Pagination/index.ts","app/components/common/Pagination/Pagination.tsx","app/components/common/Searchbar/Searchbar.tsx","app/components/common/Searchbar/index.ts","app/components/common/SectionWrapper/index.ts","app/components/common/SectionWrapper/SectionWrapper.tsx","app/components/common/Skeletons/Shimmer.tsx","app/components/common/Skeletons/SkeletonElement.tsx","app/components/common/Skeletons/Posts/SkeletonPostCard.tsx","app/components/common/Skeletons/Posts/SkeletonPostsList.tsx","app/components/pages/PostsPage/PostsPage.tsx","app/components/pages/PostsPage/index.ts","app/components/ui/Posts/PostCard/PostCard.tsx","app/components/ui/Posts/PostCard/index.ts","app/components/ui/Posts/PostsList/index.ts","app/components/ui/Posts/PostsList/PostsList.tsx"],"sourcesContent":["import Pagination from \"./Pagination\";\r\nexport default Pagination;\r\n","import React from \"react\";\r\n\r\ninterface IPagination {\r\n    itemsCount: number;\r\n    pageSize: number;\r\n    currentPage: number;\r\n    onPageChange: (pageIndex: number) => void;\r\n}\r\n\r\nconst Pagination: React.FC<IPagination> = ({\r\n    itemsCount,\r\n    pageSize,\r\n    currentPage,\r\n    onPageChange\r\n}) => {\r\n    const pageCount = Math.ceil(itemsCount / pageSize);\r\n    if (pageCount === 1) return null;\r\n    const pages = Array.from({ length: pageCount }, (_, index) => index + 1);\r\n\r\n    return (\r\n        <ul className=\"pagination\">\r\n            {pages.map((page: number) => (\r\n                <li\r\n                    className={\r\n                        \"pagination__item \" +\r\n                        (page === currentPage ? \"_active\" : \"\")\r\n                    }\r\n                    key={\"page_\" + page}\r\n                >\r\n                    <span onClick={() => onPageChange(page)}>{page}</span>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\nimport Button from \"../Button\";\r\nimport { TextField } from \"../Fields\";\r\nimport IconSvg from \"../IconSvg\";\r\n\r\ninterface ISearchbar {\r\n    label: string;\r\n    value: string;\r\n    error?: string;\r\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst Searchbar: React.FC<ISearchbar> = ({ label, value, onChange, error }) => {\r\n    return (\r\n        <div className=\"searchbar\">\r\n            <TextField\r\n                className=\"searchbar__input\"\r\n                name={\"search\"}\r\n                onChange={onChange}\r\n                value={value}\r\n                placeholder={label}\r\n                error={error}\r\n            />\r\n            <Button className=\"searchbar__btn\">\r\n                <IconSvg name=\"search\" svgClass=\"searchbar__icon\" />\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(Searchbar);\r\n","import Searchbar from \"./Searchbar\";\r\nexport default Searchbar;\r\n","import SectionWrapper from \"./SectionWrapper\";\r\n\r\nexport default SectionWrapper;\r\n","import React from \"react\";\r\n\r\ninterface IWrapper {\r\n    children: React.ReactChild | React.ReactNode;\r\n    className: string;\r\n}\r\n\r\nconst SectionWrapper: React.FC<IWrapper> = ({ children, className }) => {\r\n    return (\r\n        <section className={className}>\r\n            <div className={className + \"__container _container\"}>\r\n                {children}\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default SectionWrapper;\r\n","import React from \"react\";\r\n\r\nconst Shimmer: React.FC = () => {\r\n    return (\r\n        <div className=\"shimmer-wrapper\">\r\n            <div className=\"shimmer\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Shimmer;\r\n","import React from \"react\";\r\n\r\ninterface ISkeletonElement {\r\n    type: string;\r\n}\r\n\r\nconst SkeletonElement: React.FC<ISkeletonElement> = ({ type }) => {\r\n    const classes = `skeleton ${type}`;\r\n\r\n    return <div className={classes}></div>;\r\n};\r\n\r\nexport default SkeletonElement;\r\n","import React from \"react\";\r\nimport Shimmer from \"../Shimmer\";\r\nimport SkeletonElement from \"../SkeletonElement\";\r\n\r\ninterface ISkeletonPostCard {\r\n    theme?: string;\r\n}\r\n\r\nconst SkeletonPostCard: React.FC<ISkeletonPostCard> = ({ theme }) => {\r\n    const themeClass = theme || \"light\";\r\n\r\n    return (\r\n        <div className={`skeleton-wrapper ${themeClass}`}>\r\n            <div className=\"skeleton-post\">\r\n                <SkeletonElement type=\"image\" />\r\n                <div className=\"skeleton-post__content\">\r\n                    <SkeletonElement type=\"title\" />\r\n                    <SkeletonElement type=\"text\" />\r\n                    <SkeletonElement type=\"line\" />\r\n                    <div className=\"skeleton-buttons\">\r\n                        <SkeletonElement type=\"button\" />\r\n                        <SkeletonElement type=\"button\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Shimmer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SkeletonPostCard;\r\n","import React from \"react\";\r\nimport SkeletonPostCard from \"./SkeletonPostCard\";\r\n\r\ninterface ISkeletonPostsList {\r\n    count?: number;\r\n}\r\n\r\nconst SkeletonPostsList: React.FC<ISkeletonPostsList> = ({ count = 6 }) => {\r\n    return (\r\n        <div className=\"skeleton-posts\">\r\n            <ul className=\"skeleton-posts__list\">\r\n                {Array(count)\r\n                    .fill(\"\")\r\n                    .map((_, index) => (\r\n                        <li\r\n                            key={count - index}\r\n                            className=\"skeleton-posts__item\"\r\n                        >\r\n                            <SkeletonPostCard />\r\n                        </li>\r\n                    ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SkeletonPostsList;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { usePaginate, useSearch, useSort } from \"../../../hooks\";\r\nimport { getPostsList, getPostsLoadingStatus } from \"../../../store\";\r\nimport Breadcrumbs from \"../../common/Breadcrumbs\";\r\nimport Pagination from \"../../common/Pagination\";\r\nimport Searchbar from \"../../common/Searchbar\";\r\nimport SectionWrapper from \"../../common/SectionWrapper\";\r\nimport { SkeletonPostsList } from \"../../common/Skeletons/Posts\";\r\nimport { PostsList } from \"../../ui/Posts\";\r\n\r\nconst options = [\r\n    { name: \"6\", value: 6 },\r\n    { name: \"12\", value: 12 },\r\n    { name: \"18\", value: 18 },\r\n    { name: \"24\", value: 24 }\r\n];\r\n\r\nconst PostsPage: React.FC = () => {\r\n    const posts = useSelector(getPostsList());\r\n    const postsLoading = useSelector(getPostsLoadingStatus());\r\n\r\n    const { filteredData, searchTerm, handleChangeSearch } = useSearch(posts, {\r\n        searchBy: \"title\"\r\n    });\r\n    const { sortedItems } = useSort(filteredData || [], {\r\n        path: \"title\",\r\n        order: \"desc\"\r\n    });\r\n    const {\r\n        itemsListCrop: postsListCrop,\r\n        limit,\r\n        page,\r\n        handlePageChange\r\n    } = usePaginate(sortedItems || [], options[0].value, 1);\r\n\r\n    return (\r\n        <SectionWrapper className=\"posts\">\r\n            <Breadcrumbs />\r\n            <div className=\"posts__header posts-header\">\r\n                <h3 className=\"posts-header__title\">Новости</h3>\r\n                <div className=\"posts-header__form\">\r\n                    <Searchbar\r\n                        value={searchTerm}\r\n                        onChange={handleChangeSearch}\r\n                        label=\"Поиск по статьям...\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"posts__content\">\r\n                {!postsLoading ? (\r\n                    <PostsList items={postsListCrop} />\r\n                ) : (\r\n                    <SkeletonPostsList />\r\n                )}\r\n                {sortedItems.length > limit && (\r\n                    <Pagination\r\n                        onPageChange={handlePageChange}\r\n                        itemsCount={sortedItems.length}\r\n                        currentPage={page}\r\n                        pageSize={limit}\r\n                    />\r\n                )}\r\n                {postsListCrop.length === 0 && (\r\n                    <h2 className=\"info-title\">\r\n                        К сожалению, посты не найдены.\r\n                    </h2>\r\n                )}\r\n            </div>\r\n        </SectionWrapper>\r\n    );\r\n};\r\n\r\nexport default PostsPage;\r\n","import PostsPage from \"./PostsPage\";\r\n\r\nexport default PostsPage;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { PostItem } from \"../../../../store\";\r\nimport { getFormatDate } from \"../../../../utils/dateHelpers\";\r\nimport { textCropper } from \"../../../../utils/helpers\";\r\nimport Button from \"../../../common/Button\";\r\n\r\ninterface IPostCard {\r\n    item: PostItem;\r\n}\r\n\r\nconst PostCard: React.FC<IPostCard> = ({ item, ...rest }) => {\r\n    const slicedText = textCropper(item.previewText, 219);\r\n    const formatDate = getFormatDate(item.createdAt);\r\n\r\n    return (\r\n        <div className=\"post-card\">\r\n            <div className=\"post-card__image _ibg\">\r\n                <img src={item.image} alt=\"\" />\r\n            </div>\r\n\r\n            <div className=\"post-card__body\">\r\n                <h3 className=\"post-card__title\">{item.title}</h3>\r\n                <div className=\"post-card__text\">{slicedText}</div>\r\n                <div className=\"post-card__info\">\r\n                    <Button className=\"post-card__date\">{formatDate}</Button>\r\n                    <NavLink to={`/posts/${item._id}`}>\r\n                        <Button className=\"post-card__read\">Читать</Button>\r\n                    </NavLink>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(PostCard);\r\n","import PostCard from \"./PostCard\";\r\nexport default PostCard;\r\n","import PostsList from \"./PostsList\";\r\nexport default PostsList;\r\n","import React from \"react\";\r\nimport { PostItem } from \"../../../../store\";\r\nimport PostCard from \"../PostCard\";\r\n\r\ninterface IPostsList {\r\n    items: PostItem[];\r\n}\r\n\r\nconst PostsList: React.FC<IPostsList> = ({ items, ...rest }) => {\r\n    return (\r\n        <ul className=\"posts__list posts-list\">\r\n            {items.map((item: any) => (\r\n                <li className=\"posts-list__item\" key={item._id}>\r\n                    <PostCard item={item} {...rest} />\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default PostsList;\r\n"],"names":["itemsCount","pageSize","currentPage","onPageChange","pageCount","Math","ceil","pages","Array","from","length","_","index","className","map","page","onClick","Searchbar","label","value","onChange","error","name","placeholder","Button","IconSvg","svgClass","React","children","type","classes","themeClass","theme","SkeletonElement","Shimmer","count","fill","options","posts","useSelector","getPostsList","postsLoading","getPostsLoadingStatus","useSearch","searchBy","filteredData","searchTerm","handleChangeSearch","sortedItems","useSort","path","order","usePaginate","postsListCrop","itemsListCrop","limit","handlePageChange","SectionWrapper","Breadcrumbs","Posts","items","Pagination","PostCard","item","slicedText","textCropper","previewText","formatDate","getFormatDate","createdAt","src","image","alt","title","to","_id","rest"],"sourceRoot":""}